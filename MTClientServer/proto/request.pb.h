// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: request.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_request_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_request_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_request_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_request_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_request_2eproto;
namespace request {
class Operation;
class OperationDefaultTypeInternal;
extern OperationDefaultTypeInternal _Operation_default_instance_;
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class Transaction;
class TransactionDefaultTypeInternal;
extern TransactionDefaultTypeInternal _Transaction_default_instance_;
}  // namespace request
PROTOBUF_NAMESPACE_OPEN
template<> ::request::Operation* Arena::CreateMaybeMessage<::request::Operation>(Arena*);
template<> ::request::Request* Arena::CreateMaybeMessage<::request::Request>(Arena*);
template<> ::request::Transaction* Arena::CreateMaybeMessage<::request::Transaction>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace request {

enum Operation_OperationType : int {
  Operation_OperationType_READ = 0,
  Operation_OperationType_WRITE = 1
};
bool Operation_OperationType_IsValid(int value);
constexpr Operation_OperationType Operation_OperationType_OperationType_MIN = Operation_OperationType_READ;
constexpr Operation_OperationType Operation_OperationType_OperationType_MAX = Operation_OperationType_WRITE;
constexpr int Operation_OperationType_OperationType_ARRAYSIZE = Operation_OperationType_OperationType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Operation_OperationType_descriptor();
template<typename T>
inline const std::string& Operation_OperationType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Operation_OperationType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Operation_OperationType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Operation_OperationType_descriptor(), enum_t_value);
}
inline bool Operation_OperationType_Parse(
    const std::string& name, Operation_OperationType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Operation_OperationType>(
    Operation_OperationType_descriptor(), name, value);
}
enum Request_RequestRecipient : int {
  Request_RequestRecipient_BATCHER = 0,
  Request_RequestRecipient_PARTIAL = 1,
  Request_RequestRecipient_MERGER = 3,
  Request_RequestRecipient_PING = 4
};
bool Request_RequestRecipient_IsValid(int value);
constexpr Request_RequestRecipient Request_RequestRecipient_RequestRecipient_MIN = Request_RequestRecipient_BATCHER;
constexpr Request_RequestRecipient Request_RequestRecipient_RequestRecipient_MAX = Request_RequestRecipient_PING;
constexpr int Request_RequestRecipient_RequestRecipient_ARRAYSIZE = Request_RequestRecipient_RequestRecipient_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Request_RequestRecipient_descriptor();
template<typename T>
inline const std::string& Request_RequestRecipient_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Request_RequestRecipient>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Request_RequestRecipient_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Request_RequestRecipient_descriptor(), enum_t_value);
}
inline bool Request_RequestRecipient_Parse(
    const std::string& name, Request_RequestRecipient* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Request_RequestRecipient>(
    Request_RequestRecipient_descriptor(), name, value);
}
// ===================================================================

class Operation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:request.Operation) */ {
 public:
  inline Operation() : Operation(nullptr) {};
  virtual ~Operation();

  Operation(const Operation& from);
  Operation(Operation&& from) noexcept
    : Operation() {
    *this = ::std::move(from);
  }

  inline Operation& operator=(const Operation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Operation& operator=(Operation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Operation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Operation* internal_default_instance() {
    return reinterpret_cast<const Operation*>(
               &_Operation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Operation& a, Operation& b) {
    a.Swap(&b);
  }
  inline void Swap(Operation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Operation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Operation* New() const final {
    return CreateMaybeMessage<Operation>(nullptr);
  }

  Operation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Operation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Operation& from);
  void MergeFrom(const Operation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Operation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "request.Operation";
  }
  protected:
  explicit Operation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_request_2eproto);
    return ::descriptor_table_request_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Operation_OperationType OperationType;
  static constexpr OperationType READ =
    Operation_OperationType_READ;
  static constexpr OperationType WRITE =
    Operation_OperationType_WRITE;
  static inline bool OperationType_IsValid(int value) {
    return Operation_OperationType_IsValid(value);
  }
  static constexpr OperationType OperationType_MIN =
    Operation_OperationType_OperationType_MIN;
  static constexpr OperationType OperationType_MAX =
    Operation_OperationType_OperationType_MAX;
  static constexpr int OperationType_ARRAYSIZE =
    Operation_OperationType_OperationType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  OperationType_descriptor() {
    return Operation_OperationType_descriptor();
  }
  template<typename T>
  static inline const std::string& OperationType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, OperationType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function OperationType_Name.");
    return Operation_OperationType_Name(enum_t_value);
  }
  static inline bool OperationType_Parse(const std::string& name,
      OperationType* value) {
    return Operation_OperationType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 2,
    kValueFieldNumber = 3,
    kTypeFieldNumber = 1,
  };
  // required string key = 2;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // optional string value = 3;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_value(
      std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // required .request.Operation.OperationType type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::request::Operation_OperationType type() const;
  void set_type(::request::Operation_OperationType value);
  private:
  ::request::Operation_OperationType _internal_type() const;
  void _internal_set_type(::request::Operation_OperationType value);
  public:

  // @@protoc_insertion_point(class_scope:request.Operation)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  int type_;
  friend struct ::TableStruct_request_2eproto;
};
// -------------------------------------------------------------------

class Transaction PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:request.Transaction) */ {
 public:
  inline Transaction() : Transaction(nullptr) {};
  virtual ~Transaction();

  Transaction(const Transaction& from);
  Transaction(Transaction&& from) noexcept
    : Transaction() {
    *this = ::std::move(from);
  }

  inline Transaction& operator=(const Transaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transaction& operator=(Transaction&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Transaction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Transaction* internal_default_instance() {
    return reinterpret_cast<const Transaction*>(
               &_Transaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Transaction& a, Transaction& b) {
    a.Swap(&b);
  }
  inline void Swap(Transaction* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transaction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Transaction* New() const final {
    return CreateMaybeMessage<Transaction>(nullptr);
  }

  Transaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Transaction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Transaction& from);
  void MergeFrom(const Transaction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transaction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "request.Transaction";
  }
  protected:
  explicit Transaction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_request_2eproto);
    return ::descriptor_table_request_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOperationsFieldNumber = 3,
    kOrderFieldNumber = 1,
    kIdFieldNumber = 2,
    kClientIdFieldNumber = 4,
    kLamportStampFieldNumber = 5,
  };
  // repeated .request.Operation operations = 3;
  int operations_size() const;
  private:
  int _internal_operations_size() const;
  public:
  void clear_operations();
  ::request::Operation* mutable_operations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::request::Operation >*
      mutable_operations();
  private:
  const ::request::Operation& _internal_operations(int index) const;
  ::request::Operation* _internal_add_operations();
  public:
  const ::request::Operation& operations(int index) const;
  ::request::Operation* add_operations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::request::Operation >&
      operations() const;

  // optional string order = 1;
  bool has_order() const;
  private:
  bool _internal_has_order() const;
  public:
  void clear_order();
  const std::string& order() const;
  void set_order(const std::string& value);
  void set_order(std::string&& value);
  void set_order(const char* value);
  void set_order(const char* value, size_t size);
  std::string* mutable_order();
  std::string* release_order();
  void set_allocated_order(std::string* order);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_order();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_order(
      std::string* order);
  private:
  const std::string& _internal_order() const;
  void _internal_set_order(const std::string& value);
  std::string* _internal_mutable_order();
  public:

  // required string id = 2;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // optional int32 client_id = 4;
  bool has_client_id() const;
  private:
  bool _internal_has_client_id() const;
  public:
  void clear_client_id();
  ::PROTOBUF_NAMESPACE_ID::int32 client_id() const;
  void set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_client_id() const;
  void _internal_set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 lamport_stamp = 5;
  bool has_lamport_stamp() const;
  private:
  bool _internal_has_lamport_stamp() const;
  public:
  void clear_lamport_stamp();
  ::PROTOBUF_NAMESPACE_ID::int32 lamport_stamp() const;
  void set_lamport_stamp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lamport_stamp() const;
  void _internal_set_lamport_stamp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:request.Transaction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::request::Operation > operations_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::int32 client_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 lamport_stamp_;
  friend struct ::TableStruct_request_2eproto;
};
// -------------------------------------------------------------------

class Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:request.Request) */ {
 public:
  inline Request() : Request(nullptr) {};
  virtual ~Request();

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const final {
    return CreateMaybeMessage<Request>(nullptr);
  }

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "request.Request";
  }
  protected:
  explicit Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_request_2eproto);
    return ::descriptor_table_request_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Request_RequestRecipient RequestRecipient;
  static constexpr RequestRecipient BATCHER =
    Request_RequestRecipient_BATCHER;
  static constexpr RequestRecipient PARTIAL =
    Request_RequestRecipient_PARTIAL;
  static constexpr RequestRecipient MERGER =
    Request_RequestRecipient_MERGER;
  static constexpr RequestRecipient PING =
    Request_RequestRecipient_PING;
  static inline bool RequestRecipient_IsValid(int value) {
    return Request_RequestRecipient_IsValid(value);
  }
  static constexpr RequestRecipient RequestRecipient_MIN =
    Request_RequestRecipient_RequestRecipient_MIN;
  static constexpr RequestRecipient RequestRecipient_MAX =
    Request_RequestRecipient_RequestRecipient_MAX;
  static constexpr int RequestRecipient_ARRAYSIZE =
    Request_RequestRecipient_RequestRecipient_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RequestRecipient_descriptor() {
    return Request_RequestRecipient_descriptor();
  }
  template<typename T>
  static inline const std::string& RequestRecipient_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RequestRecipient>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RequestRecipient_Name.");
    return Request_RequestRecipient_Name(enum_t_value);
  }
  static inline bool RequestRecipient_Parse(const std::string& name,
      RequestRecipient* value) {
    return Request_RequestRecipient_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionFieldNumber = 3,
    kClientIdFieldNumber = 1,
    kServerIdFieldNumber = 2,
    kRecipientFieldNumber = 4,
    kRoundFieldNumber = 5,
  };
  // repeated .request.Transaction transaction = 3;
  int transaction_size() const;
  private:
  int _internal_transaction_size() const;
  public:
  void clear_transaction();
  ::request::Transaction* mutable_transaction(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::request::Transaction >*
      mutable_transaction();
  private:
  const ::request::Transaction& _internal_transaction(int index) const;
  ::request::Transaction* _internal_add_transaction();
  public:
  const ::request::Transaction& transaction(int index) const;
  ::request::Transaction* add_transaction();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::request::Transaction >&
      transaction() const;

  // optional int32 client_id = 1;
  bool has_client_id() const;
  private:
  bool _internal_has_client_id() const;
  public:
  void clear_client_id();
  ::PROTOBUF_NAMESPACE_ID::int32 client_id() const;
  void set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_client_id() const;
  void _internal_set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 server_id = 2;
  bool has_server_id() const;
  private:
  bool _internal_has_server_id() const;
  public:
  void clear_server_id();
  ::PROTOBUF_NAMESPACE_ID::int32 server_id() const;
  void set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_server_id() const;
  void _internal_set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required .request.Request.RequestRecipient recipient = 4;
  bool has_recipient() const;
  private:
  bool _internal_has_recipient() const;
  public:
  void clear_recipient();
  ::request::Request_RequestRecipient recipient() const;
  void set_recipient(::request::Request_RequestRecipient value);
  private:
  ::request::Request_RequestRecipient _internal_recipient() const;
  void _internal_set_recipient(::request::Request_RequestRecipient value);
  public:

  // optional int32 round = 5;
  bool has_round() const;
  private:
  bool _internal_has_round() const;
  public:
  void clear_round();
  ::PROTOBUF_NAMESPACE_ID::int32 round() const;
  void set_round(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_round() const;
  void _internal_set_round(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:request.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::request::Transaction > transaction_;
  ::PROTOBUF_NAMESPACE_ID::int32 client_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 server_id_;
  int recipient_;
  ::PROTOBUF_NAMESPACE_ID::int32 round_;
  friend struct ::TableStruct_request_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Operation

// required .request.Operation.OperationType type = 1;
inline bool Operation::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Operation::has_type() const {
  return _internal_has_type();
}
inline void Operation::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::request::Operation_OperationType Operation::_internal_type() const {
  return static_cast< ::request::Operation_OperationType >(type_);
}
inline ::request::Operation_OperationType Operation::type() const {
  // @@protoc_insertion_point(field_get:request.Operation.type)
  return _internal_type();
}
inline void Operation::_internal_set_type(::request::Operation_OperationType value) {
  assert(::request::Operation_OperationType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  type_ = value;
}
inline void Operation::set_type(::request::Operation_OperationType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:request.Operation.type)
}

// required string key = 2;
inline bool Operation::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Operation::has_key() const {
  return _internal_has_key();
}
inline void Operation::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Operation::key() const {
  // @@protoc_insertion_point(field_get:request.Operation.key)
  return _internal_key();
}
inline void Operation::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:request.Operation.key)
}
inline std::string* Operation::mutable_key() {
  // @@protoc_insertion_point(field_mutable:request.Operation.key)
  return _internal_mutable_key();
}
inline const std::string& Operation::_internal_key() const {
  return key_.Get();
}
inline void Operation::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Operation::set_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:request.Operation.key)
}
inline void Operation::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:request.Operation.key)
}
inline void Operation::set_key(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:request.Operation.key)
}
inline std::string* Operation::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Operation::release_key() {
  // @@protoc_insertion_point(field_release:request.Operation.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Operation::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:request.Operation.key)
}
inline std::string* Operation::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:request.Operation.key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Operation::unsafe_arena_set_allocated_key(
    std::string* key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:request.Operation.key)
}

// optional string value = 3;
inline bool Operation::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Operation::has_value() const {
  return _internal_has_value();
}
inline void Operation::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Operation::value() const {
  // @@protoc_insertion_point(field_get:request.Operation.value)
  return _internal_value();
}
inline void Operation::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:request.Operation.value)
}
inline std::string* Operation::mutable_value() {
  // @@protoc_insertion_point(field_mutable:request.Operation.value)
  return _internal_mutable_value();
}
inline const std::string& Operation::_internal_value() const {
  return value_.Get();
}
inline void Operation::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Operation::set_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:request.Operation.value)
}
inline void Operation::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:request.Operation.value)
}
inline void Operation::set_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:request.Operation.value)
}
inline std::string* Operation::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Operation::release_value() {
  // @@protoc_insertion_point(field_release:request.Operation.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Operation::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:request.Operation.value)
}
inline std::string* Operation::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:request.Operation.value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Operation::unsafe_arena_set_allocated_value(
    std::string* value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:request.Operation.value)
}

// -------------------------------------------------------------------

// Transaction

// optional string order = 1;
inline bool Transaction::_internal_has_order() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Transaction::has_order() const {
  return _internal_has_order();
}
inline void Transaction::clear_order() {
  order_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Transaction::order() const {
  // @@protoc_insertion_point(field_get:request.Transaction.order)
  return _internal_order();
}
inline void Transaction::set_order(const std::string& value) {
  _internal_set_order(value);
  // @@protoc_insertion_point(field_set:request.Transaction.order)
}
inline std::string* Transaction::mutable_order() {
  // @@protoc_insertion_point(field_mutable:request.Transaction.order)
  return _internal_mutable_order();
}
inline const std::string& Transaction::_internal_order() const {
  return order_.Get();
}
inline void Transaction::_internal_set_order(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  order_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Transaction::set_order(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  order_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:request.Transaction.order)
}
inline void Transaction::set_order(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  order_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:request.Transaction.order)
}
inline void Transaction::set_order(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  order_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:request.Transaction.order)
}
inline std::string* Transaction::_internal_mutable_order() {
  _has_bits_[0] |= 0x00000001u;
  return order_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Transaction::release_order() {
  // @@protoc_insertion_point(field_release:request.Transaction.order)
  if (!_internal_has_order()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return order_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Transaction::set_allocated_order(std::string* order) {
  if (order != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  order_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), order,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:request.Transaction.order)
}
inline std::string* Transaction::unsafe_arena_release_order() {
  // @@protoc_insertion_point(field_unsafe_arena_release:request.Transaction.order)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return order_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Transaction::unsafe_arena_set_allocated_order(
    std::string* order) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (order != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  order_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      order, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:request.Transaction.order)
}

// required string id = 2;
inline bool Transaction::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Transaction::has_id() const {
  return _internal_has_id();
}
inline void Transaction::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Transaction::id() const {
  // @@protoc_insertion_point(field_get:request.Transaction.id)
  return _internal_id();
}
inline void Transaction::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:request.Transaction.id)
}
inline std::string* Transaction::mutable_id() {
  // @@protoc_insertion_point(field_mutable:request.Transaction.id)
  return _internal_mutable_id();
}
inline const std::string& Transaction::_internal_id() const {
  return id_.Get();
}
inline void Transaction::_internal_set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Transaction::set_id(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:request.Transaction.id)
}
inline void Transaction::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:request.Transaction.id)
}
inline void Transaction::set_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:request.Transaction.id)
}
inline std::string* Transaction::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000002u;
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Transaction::release_id() {
  // @@protoc_insertion_point(field_release:request.Transaction.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Transaction::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:request.Transaction.id)
}
inline std::string* Transaction::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:request.Transaction.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Transaction::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:request.Transaction.id)
}

// repeated .request.Operation operations = 3;
inline int Transaction::_internal_operations_size() const {
  return operations_.size();
}
inline int Transaction::operations_size() const {
  return _internal_operations_size();
}
inline void Transaction::clear_operations() {
  operations_.Clear();
}
inline ::request::Operation* Transaction::mutable_operations(int index) {
  // @@protoc_insertion_point(field_mutable:request.Transaction.operations)
  return operations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::request::Operation >*
Transaction::mutable_operations() {
  // @@protoc_insertion_point(field_mutable_list:request.Transaction.operations)
  return &operations_;
}
inline const ::request::Operation& Transaction::_internal_operations(int index) const {
  return operations_.Get(index);
}
inline const ::request::Operation& Transaction::operations(int index) const {
  // @@protoc_insertion_point(field_get:request.Transaction.operations)
  return _internal_operations(index);
}
inline ::request::Operation* Transaction::_internal_add_operations() {
  return operations_.Add();
}
inline ::request::Operation* Transaction::add_operations() {
  // @@protoc_insertion_point(field_add:request.Transaction.operations)
  return _internal_add_operations();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::request::Operation >&
Transaction::operations() const {
  // @@protoc_insertion_point(field_list:request.Transaction.operations)
  return operations_;
}

// optional int32 client_id = 4;
inline bool Transaction::_internal_has_client_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Transaction::has_client_id() const {
  return _internal_has_client_id();
}
inline void Transaction::clear_client_id() {
  client_id_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Transaction::_internal_client_id() const {
  return client_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Transaction::client_id() const {
  // @@protoc_insertion_point(field_get:request.Transaction.client_id)
  return _internal_client_id();
}
inline void Transaction::_internal_set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  client_id_ = value;
}
inline void Transaction::set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:request.Transaction.client_id)
}

// optional int32 lamport_stamp = 5;
inline bool Transaction::_internal_has_lamport_stamp() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Transaction::has_lamport_stamp() const {
  return _internal_has_lamport_stamp();
}
inline void Transaction::clear_lamport_stamp() {
  lamport_stamp_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Transaction::_internal_lamport_stamp() const {
  return lamport_stamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Transaction::lamport_stamp() const {
  // @@protoc_insertion_point(field_get:request.Transaction.lamport_stamp)
  return _internal_lamport_stamp();
}
inline void Transaction::_internal_set_lamport_stamp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  lamport_stamp_ = value;
}
inline void Transaction::set_lamport_stamp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lamport_stamp(value);
  // @@protoc_insertion_point(field_set:request.Transaction.lamport_stamp)
}

// -------------------------------------------------------------------

// Request

// optional int32 client_id = 1;
inline bool Request::_internal_has_client_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Request::has_client_id() const {
  return _internal_has_client_id();
}
inline void Request::clear_client_id() {
  client_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Request::_internal_client_id() const {
  return client_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Request::client_id() const {
  // @@protoc_insertion_point(field_get:request.Request.client_id)
  return _internal_client_id();
}
inline void Request::_internal_set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  client_id_ = value;
}
inline void Request::set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:request.Request.client_id)
}

// optional int32 server_id = 2;
inline bool Request::_internal_has_server_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Request::has_server_id() const {
  return _internal_has_server_id();
}
inline void Request::clear_server_id() {
  server_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Request::_internal_server_id() const {
  return server_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Request::server_id() const {
  // @@protoc_insertion_point(field_get:request.Request.server_id)
  return _internal_server_id();
}
inline void Request::_internal_set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  server_id_ = value;
}
inline void Request::set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:request.Request.server_id)
}

// repeated .request.Transaction transaction = 3;
inline int Request::_internal_transaction_size() const {
  return transaction_.size();
}
inline int Request::transaction_size() const {
  return _internal_transaction_size();
}
inline void Request::clear_transaction() {
  transaction_.Clear();
}
inline ::request::Transaction* Request::mutable_transaction(int index) {
  // @@protoc_insertion_point(field_mutable:request.Request.transaction)
  return transaction_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::request::Transaction >*
Request::mutable_transaction() {
  // @@protoc_insertion_point(field_mutable_list:request.Request.transaction)
  return &transaction_;
}
inline const ::request::Transaction& Request::_internal_transaction(int index) const {
  return transaction_.Get(index);
}
inline const ::request::Transaction& Request::transaction(int index) const {
  // @@protoc_insertion_point(field_get:request.Request.transaction)
  return _internal_transaction(index);
}
inline ::request::Transaction* Request::_internal_add_transaction() {
  return transaction_.Add();
}
inline ::request::Transaction* Request::add_transaction() {
  // @@protoc_insertion_point(field_add:request.Request.transaction)
  return _internal_add_transaction();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::request::Transaction >&
Request::transaction() const {
  // @@protoc_insertion_point(field_list:request.Request.transaction)
  return transaction_;
}

// required .request.Request.RequestRecipient recipient = 4;
inline bool Request::_internal_has_recipient() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Request::has_recipient() const {
  return _internal_has_recipient();
}
inline void Request::clear_recipient() {
  recipient_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::request::Request_RequestRecipient Request::_internal_recipient() const {
  return static_cast< ::request::Request_RequestRecipient >(recipient_);
}
inline ::request::Request_RequestRecipient Request::recipient() const {
  // @@protoc_insertion_point(field_get:request.Request.recipient)
  return _internal_recipient();
}
inline void Request::_internal_set_recipient(::request::Request_RequestRecipient value) {
  assert(::request::Request_RequestRecipient_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  recipient_ = value;
}
inline void Request::set_recipient(::request::Request_RequestRecipient value) {
  _internal_set_recipient(value);
  // @@protoc_insertion_point(field_set:request.Request.recipient)
}

// optional int32 round = 5;
inline bool Request::_internal_has_round() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Request::has_round() const {
  return _internal_has_round();
}
inline void Request::clear_round() {
  round_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Request::_internal_round() const {
  return round_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Request::round() const {
  // @@protoc_insertion_point(field_get:request.Request.round)
  return _internal_round();
}
inline void Request::_internal_set_round(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  round_ = value;
}
inline void Request::set_round(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_round(value);
  // @@protoc_insertion_point(field_set:request.Request.round)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace request

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::request::Operation_OperationType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::request::Operation_OperationType>() {
  return ::request::Operation_OperationType_descriptor();
}
template <> struct is_proto_enum< ::request::Request_RequestRecipient> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::request::Request_RequestRecipient>() {
  return ::request::Request_RequestRecipient_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_request_2eproto
